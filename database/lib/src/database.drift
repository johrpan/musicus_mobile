CREATE TABLE IF NOT EXISTS "persons" (
    "id" TEXT NOT NULL PRIMARY KEY,
    "first_name" TEXT NOT NULL,
    "last_name" TEXT NOT NULL,
    "last_used" BIGINT,
    "last_played" BIGINT
);

CREATE TABLE IF NOT EXISTS "instruments" (
    "id" TEXT NOT NULL PRIMARY KEY,
    "name" TEXT NOT NULL,
    "last_used" BIGINT,
    "last_played" BIGINT
);

CREATE TABLE IF NOT EXISTS "works" (
    "id" TEXT NOT NULL PRIMARY KEY,
    "composer" TEXT NOT NULL REFERENCES "persons"("id"),
    "title" TEXT NOT NULL,
    "last_used" BIGINT,
    "last_played" BIGINT
);

CREATE TABLE IF NOT EXISTS "instrumentations" (
    "id" BIGINT NOT NULL PRIMARY KEY,
    "work" TEXT NOT NULL REFERENCES "works"("id") ON DELETE CASCADE,
    "instrument" TEXT NOT NULL REFERENCES "instruments"("id") ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS "work_parts" (
    "id" BIGINT NOT NULL PRIMARY KEY,
    "work" TEXT NOT NULL REFERENCES "works"("id") ON DELETE CASCADE,
    "part_index" BIGINT NOT NULL,
    "title" TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS "work_sections" (
    "id" BIGINT NOT NULL PRIMARY KEY,
    "work" TEXT NOT NULL REFERENCES "works"("id") ON DELETE CASCADE,
    "title" TEXT NOT NULL,
    "before_index" BIGINT NOT NULL
);

CREATE TABLE IF NOT EXISTS "ensembles" (
    "id" TEXT NOT NULL PRIMARY KEY,
    "name" TEXT NOT NULL,
    "last_used" BIGINT,
    "last_played" BIGINT
);

CREATE TABLE IF NOT EXISTS "recordings" (
    "id" TEXT NOT NULL PRIMARY KEY,
    "work" TEXT NOT NULL REFERENCES "works"("id"),
    "comment" TEXT NOT NULL,
    "last_used" BIGINT,
    "last_played" BIGINT
);

CREATE TABLE IF NOT EXISTS "performances" (
    "id" BIGINT NOT NULL PRIMARY KEY,
    "recording" TEXT NOT NULL REFERENCES "recordings"("id") ON DELETE CASCADE,
    "person" TEXT REFERENCES "persons"("id"),
    "ensemble" TEXT REFERENCES "ensembles"("id"),
    "role" TEXT REFERENCES "instruments"("id")
);

CREATE TABLE IF NOT EXISTS "mediums" (
    "id" TEXT NOT NULL PRIMARY KEY,
    "name" TEXT NOT NULL,
    "discid" TEXT,
    "last_used" BIGINT,
    "last_played" BIGINT
);

CREATE TABLE IF NOT EXISTS "tracks" (
    "id" TEXT NOT NULL PRIMARY KEY,
    "medium" TEXT NOT NULL REFERENCES "mediums"("id") ON DELETE CASCADE,
    "index" INTEGER NOT NULL,
    "recording" TEXT NOT NULL REFERENCES "recordings"("id"),
    "work_parts" TEXT NOT NULL,
    "source_index" INTEGER NOT NULL,
    "path" TEXT NOT NULL,
    "last_used" BIGINT,
    "last_played" BIGINT
);

allPersons:
SELECT *
FROM persons
ORDER BY last_name,
    first_name
LIMIT :limit OFFSET :offset;

searchPersons:
SELECT *
FROM persons
WHERE last_name LIKE :search
ORDER BY last_name,
    first_name
LIMIT :limit OFFSET :offset;

personById:
SELECT *
FROM persons
WHERE id = :id
LIMIT 1;

allInstruments:
SELECT *
FROM instruments
ORDER BY name
LIMIT :limit OFFSET :offset;

searchInstruments:
SELECT *
FROM instruments
WHERE name LIKE :search
ORDER BY name
LIMIT :limit OFFSET :offset;

instrumentById:
SELECT *
FROM instruments
WHERE id = :id
LIMIT 1;

workById:
SELECT *
FROM works
WHERE id = :id
LIMIT 1;

partsByWork:
SELECT *
FROM work_parts
WHERE work = :id
ORDER BY part_index;

worksByComposer:
SELECT *
FROM works
WHERE composer = :id
ORDER BY title
LIMIT :limit OFFSET :offset;

searchWorksByComposer:
SELECT *
FROM works
WHERE composer = :id
    AND title LIKE :search
ORDER BY title
LIMIT :limit OFFSET :offset;

instrumentsByWork:
SELECT instruments.*
FROM instrumentations
    JOIN instruments ON instrumentations.instrument = instruments.id
WHERE instrumentations.work = :workId;

allEnsembles:
SELECT *
FROM ensembles
ORDER BY name
LIMIT :limit OFFSET :offset;

searchEnsembles:
SELECT *
FROM ensembles
WHERE name LIKE :search
ORDER BY name
LIMIT :limit OFFSET :offset;

ensembleById:
SELECT *
FROM ensembles
WHERE id = :id
LIMIT 1;

recordingById:
SELECT *
FROM recordings
WHERE id = :id;

recordingsByWork:
SELECT *
FROM recordings
WHERE work = :id
ORDER BY id
LIMIT :limit OFFSET :offset;

performancesByRecording:
SELECT *
FROM performances
WHERE recording = :id;

tracksByRecording:
SELECT *
FROM tracks
WHERE recording = :id
ORDER BY "index";

tracksById:
SELECT *
FROM tracks
WHERE id = :id;
